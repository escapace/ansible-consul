#!/bin/bash
# This script is used to configure and run Consul on an AWS server.

set -e
set -u
set -o pipefail

umask 027

SCRIPT_DIR=
SCRIPT_NAME=
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPT_NAME="$(basename "$0")"

readonly AWS_ASG_TAG_KEY="aws:autoscaling:groupName"
readonly CONSUL_CONFIG_FILE="default.json"
readonly CONSUL_SYSTEMD_CONFIG_PATH="/usr/lib/systemd/system/consul.service"
readonly CONSUL_BOOTSTRAP_SYSTEMD_CONFIG_PATH="/etc/systemd/system/consul-bootstrap.service.d/010-secrets-bucket.conf"
readonly MAX_RETRIES=30
readonly SLEEP_BETWEEN_RETRIES_SEC=10
readonly DEFAULT_AUTOPILOT_CLEANUP_DEAD_SERVERS="true"
readonly DEFAULT_AUTOPILOT_LAST_CONTACT_THRESHOLD="200ms"
readonly DEFAULT_AUTOPILOT_MAX_TRAILING_LOGS="250"
readonly DEFAULT_AUTOPILOT_SERVER_STABILIZATION_TIME="10s"
readonly DEFAULT_AUTOPILOT_REDUNDANCY_ZONE_TAG="az"
readonly DEFAULT_AUTOPILOT_DISABLE_UPGRADE_MIGRATION="false"

function wrap() {
  local strings="${1}"

  local length
  local cols
  local width

  length="$(echo -n "${strings}" | awk -F '|' '{print $1}' | awk '{ print length }' | sort -n | tail -1)"
  cols="$(tput cols)"

  if [[ $(((cols - 4) / length)) -ge 2 ]]; then
    if [[ $((cols - length - 4)) -ge 80 ]]; then
      width=80
    else
      width=$((cols - length - 4))
    fi

    echo -e "${strings}" |
      fold -s -w "${width}" |
      sed -e "/--/! s|^| \||g" |
      column -t -s '|' |
      sed 's/^/  /'
  else
    local lines
    local line
    readarray -t lines <<<"${strings}"
    local option
    local description

    if [[ "${cols}" -ge 80 ]]; then
      width="78"
    else
      width=$((cols - 2))
    fi

    for line in "${lines[@]}"; do
      option="${line%%|*}"
      description=${line#*|}

      echo "${option}"
      echo
      echo "${description}" | fold -s -w "${width}" | sed 's/^/  /'
      echo
    done
  fi
}

function print_usage() {
  echo
  echo "Usage: $SCRIPT_NAME [OPTIONS]"
  echo
  echo "This script is used to configure and run Consul on an AWS server."
  echo
  echo "Options:"
  echo

  wrap "$(
    echo -e "--role|The instance role, one of \"server\", \"client\" or \"bastion\"."
    echo -e "--auto-join-tag-key|Automatically form a cluster with instances that have this tag key."
    echo -e "--auto-join-tag-value|Automatically form a cluster with instances that have this tag value."
    echo -e "--secrets-bucket-name|AWS S3 secrets bucket name."
    echo -e "--verify-server-hostname|When passed in, enable server hostname verification as part of RPC encryption."
    echo -e "--verify-incoming-https|If set to true, Consul requires that all incoming HTTPS connections make use of TLS."
    echo -e "--environment|A single environment variable in the key/value pair form 'KEY=\"val\"' to pass to Consul as environment variable when starting it up."
    echo -e "--ui|Enables the service of the web UI from this agent."
    echo -e "--interface|Bind to interface."
    echo -e "--ipv6|Use IPv6."
  )"
  echo
  echo "Options for Consul Autopilot:"
  echo
  wrap "$(
    echo -e "--autopilot-cleanup-dead-servers|Set to true or false to control the automatic removal of dead server nodes periodically and whenever a new server is added to the cluster. Defaults to $DEFAULT_AUTOPILOT_CLEANUP_DEAD_SERVERS. Optional."
    echo -e "--autopilot-last-contact-threshold|Controls the maximum amount of time a server can go without contact from the leader before being considered unhealthy. Must be a duration value such as 10s. Defaults to $DEFAULT_AUTOPILOT_LAST_CONTACT_THRESHOLD. Optional."
    echo -e "--autopilot-max-trailing-logs|Controls the maximum number of log entries that a server can trail the leader by before being considered unhealthy. Defaults to $DEFAULT_AUTOPILOT_MAX_TRAILING_LOGS. Optional."
    echo -e "--autopilot-server-stabilization-time|Controls the minimum amount of time a server must be stable in the 'healthy' state before being added to the cluster. Only takes effect if all servers are running Raft protocol version 3 or higher. Must be a duration value such as 30s. Defaults to $DEFAULT_AUTOPILOT_SERVER_STABILIZATION_TIME. Optional."
    echo -e "--autopilot-redundancy-zone-tag|(Enterprise-only) This controls the -node-meta key to use when Autopilot is separating servers into zones for redundancy. Only one server in each zone can be a voting member at one time. If left blank, this feature will be disabled. Defaults to $DEFAULT_AUTOPILOT_REDUNDANCY_ZONE_TAG. Optional."
    echo -e "--autopilot-disable-upgrade-migration|(Enterprise-only) If this flag is set, this will disable Autopilot's upgrade migration strategy in Consul Enterprise of waiting until enough newer-versioned servers have been added to the cluster before promoting any of them to voters. Defaults to $DEFAULT_AUTOPILOT_DISABLE_UPGRADE_MIGRATION. Optional."
    echo -e "--autopilot-upgrade-version-tag|(Enterprise-only) That tag to be used to override the version information used during a migration. Optional."
  )"
  echo
}

function log() {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo >&2 -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info() {
  local -r message="$1"
  log "INFO" "$message"
}

function log_warn() {
  local -r message="$1"
  log "WARN" "$message"
}

function log_error() {
  local -r message="$1"
  log "ERROR" "$message"
}

# Based on code from: http://stackoverflow.com/a/16623897/483528
function strip_prefix() {
  local -r str="$1"
  local -r prefix="$2"
  echo "${str#$prefix}"
}

function assert_not_empty() {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function get_instance_tags() {
  local -r instance_id="$1"
  local -r instance_region="${EC2_INSTANCE_REGION}"
  local tags=""
  local count_tags=""

  log_info "Looking up tags for Instance $instance_id in $instance_region"
  for ((i = 1; i <= "$MAX_RETRIES"; i++)); do
    tags=$(aws ec2 describe-tags \
      --region "$instance_region" \
      --filters "Name=resource-type,Values=instance" "Name=resource-id,Values=${instance_id}")
    count_tags=$(echo "$tags" | jq -r ".Tags? | length")
    if [[ "$count_tags" -gt 0 ]]; then
      log_info "This Instance $instance_id in $instance_region has Tags."
      echo "$tags"
      return
    else
      log_warn "This Instance $instance_id in $instance_region does not have any Tags."
      log_warn "Will sleep for $SLEEP_BETWEEN_RETRIES_SEC seconds and try again."
      sleep "$SLEEP_BETWEEN_RETRIES_SEC"
    fi
  done

  log_error "Could not find Instance Tags for $instance_id in $instance_region after $MAX_RETRIES retries."
  exit 1
}

function get_asg_size() {
  local -r asg_name="$1"
  local -r aws_region="${EC2_INSTANCE_REGION}"
  local asg_json=""

  log_info "Looking up the size of the Auto Scaling Group $asg_name in $aws_region"
  asg_json=$(aws autoscaling describe-auto-scaling-groups --region "$aws_region" --auto-scaling-group-names "$asg_name")
  echo "$asg_json" | jq -r '.AutoScalingGroups[0].DesiredCapacity'
}

function get_cluster_size() {
  local -r instance_tags="$1"
  local -r aws_region="${EC2_INSTANCE_REGION}"

  local asg_name=""
  asg_name=$(get_tag_value "$instance_tags" "$AWS_ASG_TAG_KEY")
  if [[ -z "$asg_name" ]]; then
    log_warn "This EC2 Instance does not appear to be part of an Auto Scaling Group, so cannot determine cluster size. Setting cluster size to 1."
    echo 1
  else
    get_asg_size "$asg_name"
  fi
}

# Get the value for a specific tag from the tags JSON returned by the AWS describe-tags:
# https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-tags.html
function get_tag_value() {
  local -r tags="$1"
  local -r tag_key="$2"

  echo "$tags" | jq -r ".Tags[] | select(.Key == \"$tag_key\") | .Value"
}

function get_object() {
  local -r secrets_bucket_name="$1"
  local -r source="$2"
  local -r target="$3"
  local -r user="$4"

  local -r key="${EC2_INSTANCE_REGION}/${source}"

  log_info "Downloading ${key}"

  aws s3api get-object \
    --bucket "${secrets_bucket_name}" \
    --key "${key}" \
    "${target}" >/dev/null || exit 1

  chown "${user}:${user}" "${target}"
}

function get_object_value() {
  local -r secrets_bucket_name="$1"
  local -r source="$2"

  local -r key="${EC2_INSTANCE_REGION}/${source}"

  log_info "Downloading ${key}"

  aws s3 cp --quiet \
    "s3://${secrets_bucket_name}/${key}" /dev/stdout || exit 1
}

function assert_is_installed() {
  local -r name="$1"

  if [[ ! $(command -v "${name}") ]]; then
    log_error "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

function split_by_lines() {
  local prefix="$1"
  shift

  for var in "$@"; do
    echo "${prefix}${var}"
  done
}

function address_type() {
  local -r ipv6="${1}"
  local type

  if [[ "$ipv6" == "true" ]]; then
    type="ipv6"
  else
    type="ipv4"
  fi

  echo "${type}"
}

function get_consul_address() {
  local -r ipv6="${1}"
  local -r interface="${2}"

  local type
  local variable_reference

  type="$(address_type "${ipv6}")"

  variable_reference="EC2_INSTANCE_${interface^^}_${type^^}_ADDRESS"

  echo "${!variable_reference}"
}

function get_vpc_cidr() {
  local -r ipv6="${1}"
  local -r interface="${2}"

  local type
  local variable_reference

  type="$(address_type "${ipv6}")"

  variable_reference="EC2_INSTANCE_${interface^^}_${type^^}_VPC_CIDR"

  echo "${!variable_reference}"
}

function generate_consul_config() {
  umask 027

  local -r role="${1}"
  local -r server="${2}"
  local -r config_dir="${3}"
  local -r user="${4}"
  local -r auto_join_tag_key="${5}"
  local -r auto_join_tag_value="${6}"
  local -r gossip_encryption_key="${7}"
  local -r verify_server_hostname="${8}"
  local -r verify_incoming_https="${9}"
  local -r ca_file_path="${10}"
  local -r cert_file_path="${11}"
  local -r key_file_path="${12}"
  local -r cleanup_dead_servers="${13}"
  local -r last_contact_threshold="${14}"
  local -r max_trailing_logs="${15}"
  local -r server_stabilization_time="${16}"
  local -r redundancy_zone_tag="${17}"
  local -r disable_upgrade_migration="${18}"
  local -r upgrade_version_tag="${19}"
  local -r ui_config_enabled="${20}"
  local -r acl_tokens_initial_management="${21}"
  local -r acl_tokens_agent="${22}"
  local -r ipv6="${23}"
  local -r interface="${24}"
  local -r config_path="$config_dir/$CONSUL_CONFIG_FILE"

  shift 24

  local instance_id="${EC2_INSTANCE_ID}"
  local instance_region="${EC2_INSTANCE_REGION}"
  local instance_availability_zone="${EC2_INSTANCE_AVAILABILITY_ZONE}"
  local instance_type="${EC2_INSTANCE_TYPE}"

  local describe_instance
  describe_instance="$(aws ec2 describe-instances --output json --region "${instance_region}" --instance-id "${instance_id}" | jq -r ".Reservations[0].Instances[0]")"

  local instance_lifecycle
  instance_lifecycle="$(echo "${describe_instance}" | jq -r '.InstanceLifecycle | .required // "scheduled"')"

  local advertise_addr
  advertise_addr="$(get_consul_address "${ipv6}" "${interface}")"

  local bind_addr
  bind_addr="$(get_consul_address "${ipv6}" "${interface}")"

  local retry_join_json
  if [[ "$ipv6" == "false" ]]; then
    retry_join_json=$(
      cat <<EOF
"retry_join": ["provider=aws addr_type=private_v4 region=$instance_region tag_key=$auto_join_tag_key tag_value=$auto_join_tag_value"],
EOF
    )
  else
    retry_join_json=$(
      cat <<EOF
"retry_join": ["provider=aws addr_type=public_v6 region=$instance_region tag_key=$auto_join_tag_key tag_value=$auto_join_tag_value"],
EOF
    )
  fi

  local bootstrap_expect=""
  local acl_configuration=""
  local instance_tags=""
  local cluster_size=""

  if [[ "$server" == "true" ]]; then
    instance_tags=$(get_instance_tags "$instance_id")
    cluster_size=$(get_cluster_size "$instance_tags")

    bootstrap_expect="\"bootstrap_expect\": $cluster_size,"

    acl_configuration=$(
      cat <<EOF
"acl" : {
  "enabled" : true,
  "enable_key_list_policy": true,
  "enable_token_persistence": true,
  "default_policy" : "deny",
  "down_policy" : "extend-cache",
  "tokens": {
    "initial_management": "${acl_tokens_initial_management}",
    "agent": "${acl_tokens_agent}"
  }
},
EOF
    )
  fi

  if [[ "$server" == "false" ]]; then
    acl_configuration=$(
      cat <<EOF
"acl" : {
  "enabled" : true,
  "enable_key_list_policy": true,
  "default_policy" : "deny",
  "down_policy" : "extend-cache",
  "tokens": {
    "agent": "${acl_tokens_agent}"
  }
},
EOF
    )
  fi

  local autopilot_configuration
  autopilot_configuration=$(
    cat <<EOF
"autopilot": {
  "cleanup_dead_servers": $cleanup_dead_servers,
  "last_contact_threshold": "$last_contact_threshold",
  "max_trailing_logs": $max_trailing_logs,
  "server_stabilization_time": "$server_stabilization_time",
  "redundancy_zone_tag": "$redundancy_zone_tag",
  "disable_upgrade_migration": $disable_upgrade_migration,
  "upgrade_version_tag": "$upgrade_version_tag"
},
EOF
  )

  log_info "Creating gossip encryption configuration"
  gossip_encryption_configuration="\"encrypt\": \"$gossip_encryption_key\","

  local tls_configuration=""

  log_info "Creating TLS encryption configuration"

  tls_configuration=$(
    cat <<EOF
"tls": {
  "grpc": {
    "ca_file": "$ca_file_path",
    "cert_file": "$cert_file_path",
    "key_file": "$key_file_path",
    "verify_incoming": true
  },
  "https": {
    "ca_file": "$ca_file_path",
    "cert_file": "$cert_file_path",
    "key_file": "$key_file_path",
    "verify_incoming": $verify_incoming_https,
    "verify_outgoing": true
  },
  "internal_rpc": {
    "ca_file": "$ca_file_path",
    "cert_file": "$cert_file_path",
    "key_file": "$key_file_path",
    "verify_incoming": true,
    "verify_outgoing": true,
    "verify_server_hostname": $verify_server_hostname
  }
},
EOF
  )

  local addresses
  local ports

  if [[ "$server" == "true" ]]; then
    addresses=$(
      cat <<EOF
"addresses": {
  "http": "127.0.0.1 ::1",
  "https": "127.0.0.1 ::1 ${bind_addr}"
},
EOF
    )

    ports=$(
      cat <<EOF
"ports": {
  "https": 8501
},
EOF
    )
  else
    addresses=$(
      cat <<EOF
"addresses": {
  "http": "127.0.0.1 ::1",
  "https": "127.0.0.1 ::1 ${bind_addr}",
  "grpc": "127.0.0.1 ::1",
  "grpc_tls": "127.0.0.1 ::1"
},
EOF
    )

    ports=$(
      cat <<EOF
"ports": {
  "https": 8501,
  "grpc": 8502,
  "grpc_tls": 8503
},
EOF
    )
  fi

  local connect_configuration=""
  if [[ "$server" == "true" ]]; then
    log_info "Creating Consul Connect configuration"
    connect_configuration=$(
      cat <<EOF
"connect": {
  "enabled": true
},
EOF
    )
  fi

  local ui_config=""
  if [[ "$server" == "true" && "$ui_config_enabled" == true ]]; then
    ui_config=$(
      cat <<EOF
"ui_config": {
  "enabled": true,
  "metrics_provider": "prometheus",
  "metrics_proxy": {
    "base_url": "http://[::1]:9201"
  }
},
EOF
    )
  fi

  log_info "Creating default Consul configuration"
  local default_config_json
  default_config_json=$(
    cat <<EOF
{
  "advertise_addr": "${advertise_addr}",
  "bind_addr": "${bind_addr}",
  $bootstrap_expect
  $acl_configuration
  "client_addr": "127.0.0.1 ::1",
  $addresses
  $ports
  "datacenter": "$instance_region",
  "node_name": "$instance_id",
  "leave_on_terminate": true,
  "skip_leave_on_interrupt": false,
  "rejoin_after_leave": true,
  "node_meta": {
    "availability_zone": "$instance_availability_zone",
    "instance_id": "${instance_id}",
    "instance_lifecycle": "${instance_lifecycle}",
    "instance_type": "$instance_type",
    "role": "${role}"
  },
  $retry_join_json
  "server": $server,
  $gossip_encryption_configuration
  $tls_configuration
  $autopilot_configuration
  $connect_configuration
  $ui_config
  "performance": {
    "raft_multiplier": 1
  },
  "raft_logstore": {
    "backend": "wal",
    "disable_log_cache": true,
    "verification": {
      "enabled": true,
      "interval": "60s"
    }
  },
  "log_level": "WARN",
  "telemetry": {
    "prometheus_retention_time": "24h",
    "disable_hostname": true
  }
}
EOF
  )
  log_info "Installing Consul config file in $config_path"
  echo "$default_config_json" | jq '.' >"$config_path"
  chown "$user:$user" "$config_path"
}

function generate_systemd_config() {
  umask 022

  local -r server="$1"
  local -r consul_config_dir="$2"
  local -r consul_data_dir="$3"
  local -r consul_bin_dir="$4"
  local -r consul_user="$5"
  local -r secrets_bucket_name="$6"

  shift 6
  local -r environment=("$@")

  local -r config_path="$consul_config_dir/$CONSUL_CONFIG_FILE"
  local -r systemd_config_path="${CONSUL_SYSTEMD_CONFIG_PATH}"

  log_info "Creating systemd config file to run Consul in $systemd_config_path"

  local -r unit_config=$(
    cat <<EOF
[Unit]
Description="HashiCorp Consul - A service mesh solution"
Documentation=https://www.consul.io/
After=ferm.service
After=network-online.target
Wants=ferm.service
Wants=network-online.target
ConditionFileNotEmpty=$config_path

EOF
  )

  local -r service_config=$(
    cat <<EOF
[Service]
Type=notify
User=$consul_user
Group=$consul_user
ExecStart=$consul_bin_dir/consul agent -config-dir $consul_config_dir -data-dir $consul_data_dir
ExecReload=$consul_bin_dir/consul reload
KillMode=process
KillSignal=SIGTERM
LimitNOFILE=65536
Restart=on-failure
TimeoutSec=300s

$(split_by_lines "Environment=" "${environment[@]}")

EOF
  )

  local -r install_config=$(
    cat <<EOF
[Install]
WantedBy=multi-user.target
EOF
  )

  echo -e "$unit_config" >"$systemd_config_path"
  echo -e "$service_config" >>"$systemd_config_path"
  echo -e "$install_config" >>"$systemd_config_path"

  if [[ "$server" == "true" ]]; then
    log_info "Creating systemd bootstrap config file ${CONSUL_BOOTSTRAP_SYSTEMD_CONFIG_PATH}"

    local -r bootstrap_config=$(
      cat <<EOF
[Service]
Environment='CONSUL_SECRETS_BUCKET_NAME=${secrets_bucket_name}'

EOF
    )
    echo -e "$bootstrap_config" >"${CONSUL_BOOTSTRAP_SYSTEMD_CONFIG_PATH}"
  fi
}

function generate_ferm_config() {
  log_info "Writing ferm configuration"

  local server="$1"
  local ipv6="$2"
  local interface="$3"

  local template_path="/etc/ferm/ferm.d/1010-consul.conf"

  local address
  local domain
  local vpc_cidr

  if [[ "$ipv6" == "true" ]]; then
    domain="ip6"
  else
    domain="ip"
  fi

  address="$(get_consul_address "${ipv6}" "${interface}")"
  vpc_cidr="$(get_vpc_cidr "${ipv6}" "${interface}")"

  local -r template=$(
    cat <<EOF
domain (ip ip6) table filter {
  chain OUTPUT {
    daddr (169.254.169.254 fd00:ec2::254) proto tcp mod owner uid-owner "consul" ACCEPT;
  }
}

domain ({{ (ds "data").domain }}) table filter chain INPUT saddr {{ (ds "data").vpc_cidr }} daddr {{ (ds "data").address }} {
  # lan serf: the serf lan port (tcp and udp)
  proto (tcp udp) dport 8301 ACCEPT;

  # http: the http api (tcp only)
  # proto tcp dport 8500 ACCEPT;

  # grpc: the grpc tls api (disabled)
  # proto tcp dport 8503 ACCEPT;
}

{{ if conv.ToBool ((ds "data").server) }}
domain ({{ (ds "data").domain }}) table filter chain INPUT saddr {{ (ds "data").vpc_cidr }} daddr {{ (ds "data").address }} {
  # server: server rpc address (tcp only)
  proto tcp dport 8300 ACCEPT;

  # https: the https api
  proto tcp dport 8501 ACCEPT;

  # wan serf: the serf wan port (tcp and udp)
  proto (tcp udp) dport 8302 ACCEPT;
}
{{ else }}
domain ({{ (ds "data").domain }}) table filter chain INPUT daddr {{ (ds "data").address }} {
  # sidecar service registrations
  proto tcp dport 21000:21255 ACCEPT;

  # exposed check listeners
  proto tcp dport 21500:21755 ACCEPT;
}
{{ end }}
EOF
  )

  echo "{ \"server\": ${server}, \"domain\": \"${domain}\", \"address\": \"${address}\", \"vpc_cidr\": \"${vpc_cidr}\" }" | jq '.' | gomplate \
    -i "${template}" -d data=stdin:///data.json >"${template_path}"

  chown root:root "${template_path}"
  chmod 600 "${template_path}"
}

function start_consul() {
  log_info "Reloading systemd config and starting Consul"

  sudo systemctl daemon-reload
  sudo systemctl enable consul-online.target
  sudo systemctl --no-block restart ferm consul-online.target
}

# Based on: http://unix.stackexchange.com/a/7732/215969
function get_owner_of_path() {
  local -r path="$1"
  ls -ld "$path" | awk '{print $3}'
}

function trust-ca() {
  local -r source="${1}"
  local name

  name="$(basename "${source}")"

  local -r path="/etc/pki/ca-trust/source/anchors/${name}"

  cp -f "${source}" "${path}"
  chown root:root "${path}"
  chmod 644 "${path}"

  update-ca-trust
}

function run() {
  umask 027

  if [[ ! -f "/etc/sysconfig/ec2-environment" ]]; then
    print_usage

    log_error "/etc/sysconfig/ec2-environment: No such file"

    exit 1
  fi

  set -o allexport
  source "/etc/sysconfig/ec2-environment"
  set +o allexport

  local role=""
  local server="false"
  local auto_join_tag_key=""
  local auto_join_tag_value=""
  local upgrade_version_tag=""
  local secrets_bucket_name=""
  local verify_server_hostname="false"
  local verify_incoming_https="false"
  local environment=()
  local ui_config_enabled="false"
  local ipv6="false"
  local interface="eth0"
  local cleanup_dead_servers="$DEFAULT_AUTOPILOT_CLEANUP_DEAD_SERVERS"
  local last_contact_threshold="$DEFAULT_AUTOPILOT_LAST_CONTACT_THRESHOLD"
  local max_trailing_logs="$DEFAULT_AUTOPILOT_MAX_TRAILING_LOGS"
  local server_stabilization_time="$DEFAULT_AUTOPILOT_SERVER_STABILIZATION_TIME"
  local redundancy_zone_tag="$DEFAULT_AUTOPILOT_REDUNDANCY_ZONE_TAG"
  local disable_upgrade_migration="$DEFAULT_AUTOPILOT_DISABLE_UPGRADE_MIGRATION"

  while [[ $# -gt 0 ]]; do
    local key="$1"

    case "$key" in
    --role)
      assert_not_empty "$key" "$2"
      role="$2"
      shift
      ;;
    --auto-join-tag-key)
      assert_not_empty "$key" "$2"
      auto_join_tag_key="$2"
      shift
      ;;
    --auto-join-tag-value)
      assert_not_empty "$key" "$2"
      auto_join_tag_value="$2"
      shift
      ;;
    --autopilot-cleanup-dead-servers)
      assert_not_empty "$key" "$2"
      cleanup_dead_servers="$2"
      shift
      ;;
    --autopilot-last-contact-threshold)
      assert_not_empty "$key" "$2"
      last_contact_threshold="$2"
      shift
      ;;
    --autopilot-max-trailing-logs)
      assert_not_empty "$key" "$2"
      max_trailing_logs="$2"
      shift
      ;;
    --autopilot-server-stabilization-time)
      assert_not_empty "$key" "$2"
      server_stabilization_time="$2"
      shift
      ;;
    --autopilot-redundancy-zone-tag)
      assert_not_empty "$key" "$2"
      redundancy_zone_tag="$2"
      shift
      ;;
    --autopilot-disable-upgrade-migration)
      disable_upgrade_migration="true"
      shift
      ;;
    --autopilot-upgrade-version-tag)
      assert_not_empty "$key" "$2"
      upgrade_version_tag="$2"
      shift
      ;;
    --secrets-bucket-name)
      assert_not_empty "$key" "$2"
      secrets_bucket_name="$2"
      shift
      ;;
    --verify-server-hostname)
      verify_server_hostname="true"
      ;;
    --verify-incoming-https)
      verify_incoming_https="true"
      ;;
    --environment)
      assert_not_empty "$key" "$2"
      environment+=("$2")
      shift
      ;;
    --ui)
      ui_config_enabled="true"
      ;;
    --ipv6)
      ipv6="true"
      ;;
    --interface)
      assert_not_empty "$key" "$2"
      interface="$2"
      shift
      ;;
    --help)
      print_usage
      exit
      ;;
    *)
      log_error "Unrecognized argument: $key"
      print_usage
      exit 1
      ;;
    esac

    shift
  done

  assert_not_empty "--role" "$role"
  assert_not_empty "--secrets-bucket-name" "$secrets_bucket_name"
  assert_not_empty "--auto-join-tag-key" "$auto_join_tag_key"
  assert_not_empty "--auto-join-tag-value" "$auto_join_tag_value"

  if [[ "$role" == "server" ]]; then
    server="true"
  elif [[ "$role" == "client" ]]; then
    server="false"
  elif [[ "$role" == "bastion" ]]; then
    server="false"
  else
    log_error "Unrecognized value for the --role flag."
    exit 1
  fi

  assert_is_installed "systemctl"
  assert_is_installed "aws"
  assert_is_installed "curl"
  assert_is_installed "jq"
  assert_is_installed "gomplate"
  assert_is_installed "update-ca-trust"

  local config_dir
  config_dir=$(cd "$SCRIPT_DIR/../config" && pwd)

  local data_dir
  data_dir=$(cd "$SCRIPT_DIR/../data" && pwd)

  local bin_dir
  bin_dir=$(cd "$SCRIPT_DIR/../bin" && pwd)

  local user
  user=$(get_owner_of_path "$config_dir")

  local type
  if [[ "$server" == "true" ]]; then
    type="server"
  else
    type="client"
  fi

  local gossip_encryption_key=""
  gossip_encryption_key="$(get_object_value "${secrets_bucket_name}" "${role}/consul/consul-gossip-encryption-key")"

  local tls_path
  tls_path="$(cd "$SCRIPT_DIR/../tls" && pwd)"
  local tls_ca_path
  tls_ca_path="$(cd "$SCRIPT_DIR/../tls/ca" && pwd)"

  local consul_ca_file_path=""
  consul_ca_file_path="${tls_ca_path}/consul-ca.pem"
  local consul_cert_file_path=""
  consul_cert_file_path="${tls_path}/consul-${type}.pem"
  local consul_key_file_path=""
  consul_key_file_path="${tls_path}/consul-${type}-key.pem"

  get_object "${secrets_bucket_name}" \
    "${role}/consul/consul-ca.pem" \
    "${consul_ca_file_path}" \
    "${user}"

  get_object "${secrets_bucket_name}" \
    "${role}/consul/consul-${type}.pem" \
    "${consul_cert_file_path}" \
    "${user}"

  get_object "${secrets_bucket_name}" \
    "${role}/consul/consul-${type}-key.pem" \
    "${consul_key_file_path}" \
    "${user}"

  local acl_tokens_agent=""
  acl_tokens_agent="$(get_object_value "${secrets_bucket_name}" "${role}/consul/consul-acl-token-consul-agent")"

  local acl_tokens_initial_management=""
  if [[ "$server" == "true" ]]; then
    acl_tokens_initial_management="$(get_object_value "${secrets_bucket_name}" "${role}/consul/consul-acl-token-consul-initial-management")"
  fi

  generate_consul_config \
    "$role" \
    "$server" \
    "$config_dir" \
    "$user" \
    "$auto_join_tag_key" \
    "$auto_join_tag_value" \
    "$gossip_encryption_key" \
    "$verify_server_hostname" \
    "$verify_incoming_https" \
    "$consul_ca_file_path" \
    "$consul_cert_file_path" \
    "$consul_key_file_path" \
    "$cleanup_dead_servers" \
    "$last_contact_threshold" \
    "$max_trailing_logs" \
    "$server_stabilization_time" \
    "$redundancy_zone_tag" \
    "$disable_upgrade_migration" \
    "$upgrade_version_tag" \
    "$ui_config_enabled" \
    "$acl_tokens_initial_management" \
    "$acl_tokens_agent" \
    "$ipv6" \
    "$interface"

  generate_systemd_config \
    "$server" \
    "$config_dir" \
    "$data_dir" \
    "$bin_dir" \
    "$user" \
    "$secrets_bucket_name" \
    "${environment[@]}"

  generate_ferm_config \
    "$server" \
    "$ipv6" \
    "$interface"

  trust-ca "$consul_ca_file_path"

  start_consul
}

run "$@"
