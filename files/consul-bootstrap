#!/usr/bin/env bash

set -e
set -u
set -o pipefail

umask 027

SCRIPT_NAME=
SCRIPT_NAME="$(basename "$0")"

SCRIPT_DIR=
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

CONSUL_CONFIG_DIR=
CONSUL_CONFIG_DIR="$(cd "$SCRIPT_DIR/../config" && pwd)"

CONSUL_INITIAL_MANAGEMENT_TOKEN=
CONSUL_INITIAL_MANAGEMENT_TOKEN="$(cat "${CONSUL_CONFIG_DIR}/default.json" | jq -r '.acl.tokens.initial_management')"

CONSUL_AGENT_TOKEN=
CONSUL_AGENT_TOKEN="$(cat "${CONSUL_CONFIG_DIR}/default.json" | jq -r '.acl.tokens.agent')"

CONSUL_POLICY_DIR=
CONSUL_POLICY_DIR="$(cd "$SCRIPT_DIR/../policy" && pwd)"

CONSUL_BIN_DIR=
CONSUL_BIN_DIR="$(cd "$SCRIPT_DIR/../bin" && pwd)"

readonly CONSUL_HTTP_ADDR="http://[::1]:8500"

set -o allexport
source "/etc/sysconfig/ec2-environment"
set +o allexport

function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local -r message="$1"
  log "INFO" "$message"
}

function log_error {
  local -r message="$1"
  log "ERROR" "$message"
}

if [[ -z "${CONSUL_SECRETS_BUCKET_NAME}" ]]
then
  log_error "CONSUL_SECRETS_BUCKET_NAME not set"

  exit 1
fi

function get_token() {
  local -r name="$1"
  local -r key="${EC2_INSTANCE_REGION}/server/consul/consul-acl-token-${name}"

  log_info "Downloading ${key}"

  aws s3 cp --quiet \
    "s3://${CONSUL_SECRETS_BUCKET_NAME}/${key}" /dev/stdout || exit 1
}

function get_policy() {
  local -r name="$1"
  local -r key="${EC2_INSTANCE_REGION}/server/consul/consul-acl-policy-${name}.hcl"

  log_info "Downloading ${key}"

  aws s3api get-object --bucket "${CONSUL_SECRETS_BUCKET_NAME}" \
    --key "${key}" \
    "${CONSUL_POLICY_DIR}/${name}.hcl" &> /dev/null || exit 1
}

function consul_agent_self_leader() {
  local consul_http_addr="${CONSUL_HTTP_ADDR}"
  local consul_http_token="${CONSUL_INITIAL_MANAGEMENT_TOKEN}"

  curl -s -k \
    --header "Authorization: Bearer ${consul_http_token}" \
    "${consul_http_addr}/v1/agent/self" | jq -r '.Stats.consul.leader' 2>/dev/null
}

function consul_is_leader() {
  until [[ "$(consul_agent_self_leader)" == "true" ]] || [[ "$(consul_agent_self_leader)" == "false" ]]; do
    echo "Waiting for Consul to get a leader..."
    sleep 5
  done

  [[ "$(consul_agent_self_leader)" == "true" ]]
}

function consul_policy_create() {
  local -r name="$1"
  local -r description="$2"
  local -r policy="${CONSUL_POLICY_DIR}/${name}.hcl"
  local consul_http_token="${CONSUL_INITIAL_MANAGEMENT_TOKEN}"

  if CONSUL_HTTP_TOKEN="${consul_http_token}" "${CONSUL_BIN_DIR}/consul" acl policy read -name "${name}" &> /dev/null
  then
    true
  else
    get_policy "${name}"

    CONSUL_HTTP_TOKEN="${consul_http_token}" "${CONSUL_BIN_DIR}/consul" acl policy create \
      -name "${name}" \
      -description "${description}" \
      -rules "@${CONSUL_POLICY_DIR}/${name}.hcl" &> /dev/null
  fi
}

function consul_token_update() {
  local -r description="$1"
  local -r secret="$2"
  shift 2
  local -r policies=("$@")

  local policies_config=()
  for policy in "${policies[@]}"
  do
    policies_config+=("-policy-name")
    policies_config+=("${policy}")
  done

  local accessor_id
  local consul_http_token="${CONSUL_INITIAL_MANAGEMENT_TOKEN}"

  accessor_id="$(CONSUL_HTTP_TOKEN="${consul_http_token}" consul acl token list -format json | jq -r ".[] | select(.SecretID == \"${secret}\") | .AccessorID")"

  if [[ -z "${accessor_id}" ]]
  then
    CONSUL_HTTP_TOKEN="${consul_http_token}" "${CONSUL_BIN_DIR}/consul" acl token create \
      -description "${description}" \
      -secret "${secret}" \
      "${policies_config[@]}" &> /dev/null
  fi
}

consul_token_anonymous_update() {
  local consul_http_token="${CONSUL_INITIAL_MANAGEMENT_TOKEN}"

  local -r policies=("$@")

  local policies_config=()
  for policy in "${policies[@]}"
  do
    policies_config+=("-policy-name")
    policies_config+=("${policy}")
  done

  CONSUL_HTTP_TOKEN="${consul_http_token}" "${CONSUL_BIN_DIR}/consul" acl token update \
    -id "00000000-0000-0000-0000-000000000002" \
    -description "Anonymous Token" \
    --merge-policies \
    "${policies_config[@]}" &> /dev/null
}

function main() {
  local consul_operator_token
  local consul_telemetry_token
  local nomad_client_token
  local nomad_server_token
  local consul_terraform_sync_token

  if consul_is_leader
  then
    consul_operator_token="$(get_token "consul-operator")"
    consul_telemetry_token="$(get_token "consul-telemetry")"
    nomad_client_token="$(get_token "nomad-client")"
    nomad_server_token="$(get_token "nomad-server")"
    consul_terraform_sync_token="$(get_token "consul-terraform-sync")"
    consul_esm_token="$(get_token "consul-esm")"

    consul_policy_create "consul-operator" "Consul Operator Policy"
    consul_policy_create "consul-agent" "Consul Agent Policy"
    consul_policy_create "consul-dns" "Consul DNS Policy"
    consul_policy_create "consul-ui" "Consul UI Policy"
    consul_policy_create "consul-telemetry" "Consul Telemetry Policy"

    consul_policy_create "consul-terraform-sync" "Consul Terraform Sync Policy"
    consul_policy_create "consul-esm" "Consul ESM Policy"

    consul_policy_create "nomad-client" "Nomad Client Policy"
    consul_policy_create "nomad-server" "Nomad Server Policy"

    sleep 3

    consul_token_anonymous_update "consul-dns" "consul-ui"
    consul_token_update "Consul Agent Token" "${CONSUL_AGENT_TOKEN}" "consul-agent"
    consul_token_update "Consul Telemetry Token" "${consul_telemetry_token}" "consul-telemetry"
    consul_token_update "Consul Operator Token" "${consul_operator_token}" "consul-operator"

    consul_token_update "Consul Terraform Sync Token" "${consul_terraform_sync_token}" "consul-terraform-sync"
    consul_token_update "Consul ESM Token" "${consul_esm_token}" "consul-esm"

    consul_token_update "Nomad Client Token" "${nomad_client_token}" "nomad-client"
    consul_token_update "Nomad Server Token" "${nomad_server_token}" "nomad-server"
  fi
}

main
